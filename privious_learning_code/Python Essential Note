                    Python Identifiers
                    ==================
A Python identifier is a name used to identify a variable, function, class, module or other object.
An identifier starts with a letter A to Z or a to z or an underscore (_) followed by zero or more letters,
underscores and digits (0 to 9).

Python does not allow punctuation characters such as @, $, and % within identifiers.
Python is a case sensitive programming language. Thus, Manpower and manpower are two different identifiers in Python.

Here are naming conventions for Python identifiers −

    *^* Class names start with an uppercase letter. All other identifiers start with a lowercase letter.

    *^* Starting an identifier with a single leading underscore indicates that the identifier is private.

    *^* Starting an identifier with two leading underscores indicates a strongly private identifier.

    *^* If the identifier also ends with two trailing underscores, the identifier is a language-defined special name.


                    Python Reserved Words
                    =====================
The following list shows the Python keywords.
These are reserved words and you cannot use them as constant or variable or any other identifier names.
All the Python keywords contain lowercase letters only.
            ===============================================
            ||   and 	    ||   exec 	    ||   not     ||
            ||   assert 	||   finally 	||   or      ||
            ||   break 	    ||   for 	    ||   pass    ||
            ||   class 	    ||   from 	    ||   print   ||
            ||   continue 	||   global 	||   raise   ||
            ||   def 	    ||   if 	    ||   return  ||
            ||   del 	    ||   import 	||   try     ||
            ||   elif 	    ||   in 	    ||   while   ||
            ||   else 	    ||   is 	    ||   with    ||
            ||   except 	||   lambda 	||   yield   ||
            ===============================================

            Using Blank Lines
            =================
A line containing only whitespace, possibly with a comment, is known as a blank line and Python totally ignores it.

In an interactive interpreter session, you must enter an empty physical line to terminate a multiline statement.
Waiting for the User

The following line of the program displays the prompt, the statement saying “Press the enter key to exit”, and waits for the user to take action −
|-----------------------------------------------|
|    #!/usr/bin/python                          |
|                                               |
|raw_input("\n\nPress the enter key to exit.")  |
|-----------------------------------------------|

Here, "\n\n" is used to create two new lines before displaying the actual line. Once the user presses the key, the program ends. This is a nice trick to keep a console window open until the user is done with an application.
Multiple Statements on a Single Line

The semicolon ( ; ) allows multiple statements on the single line given that neither statement starts a new code block. Here is a sample snip using the semicolon −
   |----------------------------------------------------|
   | import sys; x = 'foo'; sys.stdout.write(x + '\n')  |
   |----------------------------------------------------|
Multiple Statement Groups as Suites

A group of individual statements, which make a single code block are called suites in Python. Compound or complex statements, such as if, while, def, and class require a header line and a suite.

Header lines begin the statement (with the keyword) and terminate with a colon ( : ) and are followed by one or more lines which make up the suite. For example −
   |--------------------|
   | if expression :    |
   |    suite           |
   | elif expression :  |
   |    suite           |
   | else :             |
   |    suite           |
   |--------------------|

                    Standard Data Types
                    ===================
The data stored in memory can be of many types. For example, a person's age is stored as a numeric value and his or her address is stored as alphanumeric characters.
Python has various standard data types that are used to define the operations possible on them and the storage method for each of them.

Python has five standard data types −

    1   Numbers
            Python supports four different numerical types −

                    *^* int (signed integers)
                    *^* long (long integers, they can also be represented in octal and hexadecimal)
                    *^* float (floating point real values)
                    *^* complex (complex numbers)

    2   String
            Strings in Python are identified as a contiguous set of characters represented in the quotation marks. Python allows for either pairs of single or double quotes.
            Subsets of strings can be taken using the slice operator ([ ] and [:] ) with indexes starting at 0 in the beginning of the string and working their way from -1 at the end.

            The plus (+) sign is the string concatenation operator and the asterisk (*) is the repetition operator.

    3   List
            Lists are the most versatile of Python's compound data types. A list contains items separated by commas and enclosed within square brackets ([]).
            To some extent, lists are similar to arrays in C. One difference between them is that all the items belonging to a list can be of different data type.
            The values stored in a list can be accessed using the slice operator ([ ] and [:]) with indexes starting at 0 in the beginning of the list and working their way to end -1.
            The plus (+) sign is the list concatenation operator, and the asterisk (*) is the repetition operator.
    4   Tuple
            A tuple is another sequence data type that is similar to the list. A tuple consists of a number of values separated by commas. Unlike lists, however, tuples are enclosed within parentheses.

            The main differences between lists and tuples are: Lists are enclosed in brackets ( [ ] ) and their elements and size can be changed, while tuples are enclosed in parentheses ( ( ) ) and cannot be updated. Tuples can be thought of as read-only lists.

    5   Dictionary
            Python's dictionaries are kind of hash table type. They work like associative arrays or hashes found in Perl and consist of key-value pairs.
            A dictionary key can be almost any Python type, but are usually numbers or strings. Values, on the other hand, can be any arbitrary Python object.

            Dictionaries are enclosed by curly braces ({ }) and values can be assigned and accessed using square braces ([]).

            Data Type Conversion
            ====================
Sometimes, you may need to perform conversions between the built-in types. To convert between types, you simply use the type name as a function.

There are several built-in functions to perform conversion from one data type to another. These functions return a new object representing the converted value.

            Sr.No. 	                                        Function & Description
            1   int(x [,base])---------> Converts x to an integer. base specifies the base if x is a string.

            2   long(x [,base] )-------> Converts x to a long integer. base specifies the base if x is a string.

            3   float(x)---------------> Converts x to a floating-point number.

            4   complex(real [,imag])--> Creates a complex number.

            5   str(x)-----------------> Converts object x to a string representation.

            6   repr(x)----------------> Converts object x to an expression string.

            7 	eval(str)--------------> Evaluates a string and returns an object.

            8   tuple(s)---------------> Converts s to a tuple.

            9   list(s)----------------> Converts s to a list.

            10  set(s)-----------------> Converts s to a set.

            11  dict(d)----------------> Creates a dictionary. d must be a sequence of (key,value) tuples.

            12 	frozenset(s)-----------> Converts s to a frozen set.

            13  chr(x)-----------------> Converts an integer to a character.

            14  unichr(x)--------------> Converts an integer to a Unicode character.

            15  ord(x)-----------------> Converts a single character to its integer value.

            16  hex(x)-----------------> Converts an integer to a hexadecimal string.

            17  oct(x)-----------------> Converts an integer to an octal string.

                    Python - Basic Operators
                    ========================
            Operators are the constructs which can manipulate the value of operands.

            Consider the expression 4 + 5 = 9. Here, 4 and 5 are called operands and + is called operator.
            Types of Operator

            Python language supports the following types of operators.

                1   Arithmetic Operators

                        |==========================================================================================================================================================|
                        |    Operator 	        |             Description 	                                                                      |   Example                      |
                        ============================================================================================================================================================
                        |    + Addition 	    |     Adds values on either side of the operator. 	                                              |  a + b = 30                    |
                        -----------------------------------------------------------------------------------------------------------------------------------------------------------|
                        |    - Subtraction 	    |     Subtracts right hand operand from left hand operand. 	                                      |  a – b = -10                   |
                        -----------------------------------------------------------------------------------------------------------------------------------------------------------|
                        |    * Multiplication 	|    Multiplies values on either side of the operator 	                                          |  a * b = 200                   |
                        -----------------------------------------------------------------------------------------------------------------------------------------------------------|
                        |    / Division 	    |    Divides left hand operand by right hand operand      	                                      |  b / a = 2                     |
                        -----------------------------------------------------------------------------------------------------------------------------------------------------------|
                        |    % Modulus 	        |    Divides left hand operand by right hand operand and returns remainder 	                      |  b % a = 0                     |
                        -----------------------------------------------------------------------------------------------------------------------------------------------------------|
                        |    ** Exponent 	    |    Performs exponential (power) calculation on operators 	                                      |  a**b =10 to the power 20      |
                        -----------------------------------------------------------------------------------------------------------------------------------------------------------|
                        |     	                |    Floor Division - The division of operands where the result is the quotient in                |   9//2 = 4 and 9.0//2.0 = 4.0, |
                        |     //                |    which the digits after the decimal point are removed.But if one of the operands is negative, |   -11//3 = -4, -11.0//3 = -4.0 |
                        |                       |    the result is floored, i.e., rounded away from zero (towards negative infinity) −            |                                |
                        -----------------------------------------------------------------------------------------------------------------------------------------------------------|

                2   Comparison (Relational) Operators
                    These operators compare the values on either sides of them and decide the relation among them. They are also called Relational operators.
                        ================================================================================================================================================================|
                        |Operator |	    Description 	                                                                                              |   Example                       |
                        |=============================================================================================================================|=================================|
                        |   == 	  | If the values of two operands are equal, then the condition becomes true. 	                                      | (a == b) is not true.           |
                        -----------------------------------------------------------------------------------------------------------------------------------------------------------------
                        |   != 	  | If values of two operands are not equal, then condition becomes true. 	                                          | (a != b) is true.               |
                        -----------------------------------------------------------------------------------------------------------------------------------------------------------------
                        |   <> 	  | If values of two operands are not equal, then condition becomes true. 	                                          | (a <> b) is true.               |
                        |         |                                                                                                                   |  This is similar to != operator.|
                        -----------------------------------------------------------------------------------------------------------------------------------------------------------------
                        |   > 	  | If the value of left operand is greater than the value of right operand, then condition becomes true. 	          | (a > b) is not true.            |
                        -----------------------------------------------------------------------------------------------------------------------------------------------------------------
                        |   < 	  | If the value of left operand is less than the value of right operand, then condition becomes true. 	              | (a < b) is true.                |
                        -----------------------------------------------------------------------------------------------------------------------------------------------------------------
                        |   >= 	  | If the value of left operand is greater than or equal to the value of right operand, then condition becomes true. | (a >= b) is not true.           |
                        -----------------------------------------------------------------------------------------------------------------------------------------------------------------
                        |   <= 	  | If the value of left operand is less than or equal to the value of right operand, then condition becomes true. 	  | (a <= b) is true.               |
                        -----------------------------------------------------------------------------------------------------------------------------------------------------------------
                3   Assignment Operators
                        ============================================================================================================================================================================================|
                        |       Operator 	    |                            Description 	                                                    |         Example                                                   |
                        |===========================================================================================================================================================================================|
                        |    = 	                |   Assigns values from right side operands to left side operand 	                            | c = a + b assigns value of a + b into c                           |
                        |-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
                        |    += Add AND 	    |   It adds right operand to the left operand and assign the result to left operand 	        | c += a is equivalent to c = c + a                                 |
                        |-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
                        |    -= Subtract AND 	|   It subtracts right operand from the left operand and assign the result to left operand 	    | c -= a is equivalent to c = c - a                                 |
                        |-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
                        |    *= Multiply AND 	|   It multiplies right operand with the left operand and assign the result to left operand 	| c *= a is equivalent to c = c * a                                 |
                        |-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
                        |    /= Divide AND 	    |   It divides left operand with the right operand and assign the result to left operand 	    | c /= a is equivalent to c = c / ac /= a is equivalent to c = c / a|
                        |-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
                        |    %= Modulus AND 	|   It takes modulus using two operands and assign the result to left operand 	                | c %= a is equivalent to c = c % a                                 |
                        |-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
                        |    **= Exponent AND 	|   Performs exponential (power) calculation on operators and assign value to the left operand 	| c **= a is equivalent to c = c ** a                               |
                        |-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
                        |    //= Floor Division |   It performs floor division on operators and assign value to the left operand 	            | c //= a is equivalent to c = c // a                               |
                        --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
                4   Logical Operators
                        ========================================================================================================================|
                        | Operator 	            | Description 	                                                        |    Example            |
                        =========================================================================================================================
                        | and Logical AND 	    | If both the operands are true then condition becomes true. 	        | (a and b) is true.    |
                        -------------------------------------------------------------------------------------------------------------------------
                        | or Logical OR 	    | If any of the two operands are non-zero then condition becomes true. 	| (a or b) is true.     |
                        -------------------------------------------------------------------------------------------------------------------------
                        | not Logical NOT 	    | Used to reverse the logical state of its operand. 	                | Not(a and b) is false.|
                        -------------------------------------------------------------------------------------------------------------------------
                5   Bitwise Operators
                        =================================================================================================================================================================================
                        |       Operator 	           |         Description 	                                                                      |     Example                                     |
                        |==============================|==============================================================================================|=================================================|
                        |   & Binary AND 	           | Operator copies a bit to the result if it exists in both operands 	                          | (a & b) (means 0000 1100)                       |
                        ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                        |   | Binary OR 	           | It copies a bit if it exists in either operand. 	                                          | (a | b) = 61 (means 0011 1101)                  |
                        ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                        |   ^ Binary XOR 	           | It copies the bit if it is set in one operand but not both. 	                              | (a ^ b) = 49 (means 0011 0001)                  |
                        ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                        |   ~ Binary Ones Complement   | It is unary and has the effect of 'flipping' bits. 	                                      | (~a ) = -61 (means 1100 0011 in 2's complement  |
                        |                              |                                                                                              |       form due to a signed binary number.       |
                        ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                        |   << Binary Left Shift 	   | The left operands value is moved left by the number of bits specified by the right operand.  | a << 2 = 240 (means 1111 0000)                  |
                        ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                        |   >> Binary Right Shift 	   | The left operands value is moved right by the number of bits specified by the right operand. | a >> 2 = 15 (means 0000 1111)                   |
                        ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                6   Membership Operators
                        |==============================================================================================================================================|
                        |  Operator | Description 	                                      |           Example                                                          |
                        ================================================================================================================================================
                        |   in 	    | Evaluates to true if it finds a variable in the     | x in y, here in results in a 1 if x is a member of sequence y.             |
                        |           |   specified sequence and false otherwise.           |                                                                            |
                        ------------------------------------------------------------------------------------------------------------------------------------------------
                        |   not in 	| Evaluates to true if it does not finds a variable   | x not in y, here not in results in a 1 if x is not a member of sequence y. |
                        |           |   in the specified sequence and false otherwise. 	  |                                                                            |
                        ------------------------------------------------------------------------------------------------------------------------------------------------

                7   Identity Operators
                        ==================================================================================================================================================
                        | Operator |	Description 	                                         |       Example                                                         |
                        ==================================================================================================================================================
                        | is 	   | Evaluates to true if the variables on either side of        |   x is y, here is results in 1 if id(x) equals id(y).                 |
                        |          |  the operator point to the same object and false otherwise. |	                                                                     |
                        --------------------------------------------------------------------------------------------------------------------------------------------------
                        | is not   | Evaluates to false if the variables on either side of the   |   x is not y, here is not results in 1 if id(x) is not equal to id(y).|
                        |          | operator point to the same object and true otherwise. 	     |                                                                       |
                        --------------------------------------------------------------------------------------------------------------------------------------------------

                            Python Operators Precedence
                            ============================
                        _________________________________________________________________________________________________________
                        |   No. | 	Operator & Description                                                                      |
                        ---------------------------------------------------------------------------------------------------------
                        |   1   | ** --------> Exponentiation (raise to the power)                                              |
                        _________________________________________________________________________________________________________
                        |   2   | ~ + -   -----> Complement, unary plus and minus (method names for the last two are +@ and -@) |
                        _________________________________________________________________________________________________________
                        |   3   | * / % //  --------> Multiply, divide, modulo and floor division                               |
                        _________________________________________________________________________________________________________
                        |   4   | + -       -------->  Addition and subtraction                                                 |
                        _________________________________________________________________________________________________________
                        |   5   | >> <<  -----------> Right and left bitwise shift                                              |
                        _________________________________________________________________________________________________________
                        |   6   | &    -------------> Bitwise 'AND'                                                             |
                        _________________________________________________________________________________________________________
                        |   7   | ^ |  -------------> Bitwise exclusive `OR' and regular `OR'                                   |
                        _________________________________________________________________________________________________________
                        |   8   | <= < > >=   ------> Comparison operators                                                      |
                        _________________________________________________________________________________________________________
                        |   9   | <> == !=    ------> Equality operators                                                        |
                        _________________________________________________________________________________________________________
                        |   10  | = %= /= //= -= += *= **=  -----> Assignment operators                                         |
                        _________________________________________________________________________________________________________
                        |   11  | is is not   -------> Identity operators                                                       |
                        _________________________________________________________________________________________________________
                        |   12  | in not in   -------> Membership operators                                                     |
                        _________________________________________________________________________________________________________
                        |   13  | not or and  -------> Logical operators                                                        |
                        ---------------------------------------------------------------------------------------------------------


                            Decision Making
                            ===============
Decision making is anticipation of conditions occurring while execution of the program and specifying actions taken according to the conditions.

Decision structures evaluate multiple expressions which produce TRUE or FALSE as outcome.
You need to determine which action to take and which statements to execute if outcome is TRUE or FALSE otherwise.

Python programming language assumes any non-zero and non-null values as TRUE, and if it is either zero or null, then it is assumed as FALSE value.

                        1 	if statements---------> An if statement consists of a boolean expression followed by one or more statements.
        It is similar to that of other languages. The if statement contains a logical expression using which data is compared and a decision is made based on the result of the comparison.
        Syntax
        =====================
        | if expression:    |
        |    statement(s)   |
        =====================

        If the boolean expression evaluates to TRUE, then the block of statement(s) inside the if statement is executed.
        If boolean expression evaluates to FALSE, then the first set of code after the end of the if statement(s) is executed.

                        2 	if...else statements -> An if statement can be followed by an optional else statement, which executes when the boolean expression is FALSE.
         An else statement can be combined with an if statement. An else statement contains the block of code that executes if the conditional expression in the if statement resolves to 0 or a FALSE value.

        The else statement is an optional statement and there could be at most only one else statement following if.
        Syntax

        The syntax of the if...else statement is −
                    =====================
                    | if expression:    |
                    |    statement(s)   |
                    | else:             |
                    |    statement(s)   |
                    =====================

                        3 	nested if statements -> You can use one if or else if statement inside another if or else if statement(s).
       There may be a situation when you want to check for another condition after a condition resolves to true. In such a situation, you can use the nested if construct.

       In a nested if construct, you can have an if...elif...else construct inside another if...elif...else construct.
       Syntax

       The syntax of the nested if...elif...else construct may be −
                           ==============================
                           |    if expression1:         |
                           |       statement(s)         |
                           |       if expression2:      |
                           |          statement(s)      |
                           |       elif expression3:    |
                           |          statement(s)      |
                           |       elif expression4:    |
                           |          statement(s)      |
                           |       else:                |
                           |          statement(s)      |
                           |    else:                   |
                           |       statement(s)         |
                           ==============================

*** Single Statement Suites

If the suite of an if clause consists only of a single line, it may go on the same line as the header statement.
    example
        Here is an example of a one-line if clause −
                |=============================================================|
                |   var = 100                                                 |
                |   if ( var == 100 ) : print "Value of expression is 100"    |
                |   print "Good bye!"                                         |
                |=============================================================|

                            Loops
                            =====
In general, statements are executed sequentially: The first statement in a function is executed first, followed by the second, and so on.
There may be a situation when you need to execute a block of code several number of times.

Programming languages provide various control structures that allow for more complicated execution paths.

A loop statement allows us to execute a statement or group of statements multiple times.

Python programming language provides following types of loops to handle looping requirements.

        1 	while loop --->  Repeats a statement or group of statements while a given condition is TRUE. It tests the condition before executing the loop body.
      A while loop statement in Python programming language repeatedly executes a target statement as long as a given condition is true.
Syntax

The syntax of a while loop in Python programming language is −
            |===================|
            | while expression: |
            |   statement(s)    |
            |===================|
Here, statement(s) may be a single statement or a block of statements. The condition may be any expression, and true is any non-zero value.
The loop iterates while the condition is true.

When the condition becomes false, program control passes to the line immediately following the loop.

In Python, all the statements indented by the same number of character spaces after a programming construct are considered to be part of a single block of code.
Python uses indentation as its method of grouping statements.

key point of the while loop is that the loop might not ever run. When the condition is tested and the result is false, the loop body will be skipped and the first statement after the while loop will be executed.

The Infinite Loop
-----------------

A loop becomes infinite loop if a condition never becomes FALSE.
You must use caution when using while loops because of the possibility that this condition never resolves to a FALSE value.
This results in a loop that never ends. Such a loop is called an infinite loop.

An infinite loop might be useful in client/server programming where the server needs to run continuously so that client programs can communicate with it as and when required.

Using else Statement with Loops
-------------------------------
Python supports to have an else statement associated with a loop statement.

    If the else statement is used with a for loop, the else statement is executed when the loop has exhausted iterating the list.

Single Statement Suites
------------------------

Similar to the if statement syntax, if your while clause consists only of a single statement, it may be placed on the same line as the while header.

        2 	for loop ----->  Executes a sequence of statements multiple times and abbreviates the code that manages the loop variable.
     It has the ability to iterate over the items of any sequence, such as a list or a string.
        Syntax
        |===================================|
        | for iterating_var in sequence:    |
        |    statements(s)                  |
        |===================================|
     If a sequence contains an expression list, it is evaluated first. Then, the first item in the sequence is assigned to the iterating variable iterating_var.
     Next, the statements block is executed. Each item in the list is assigned to iterating_var, and the statement(s) block is executed until the entire sequence is exhausted.

*** Iterating by Sequence Index ----> An alternative way of iterating through each item is by index offset into the sequence itself.

*** Using else Statement with Loops

Python supports to have an else statement associated with a loop statement

     ** If the else statement is used with a for loop, the else statement is executed when the loop has exhausted iterating the list.

     ** If the else statement is used with a while loop, the else statement is executed when the condition becomes false.


        3 	nested loops ->  You can use one or more loop inside any another while, for or do..while loop.
     Python programming language allows to use one loop inside another loop. Following section shows few examples to illustrate the concept.
            Syntax
                |===================================|
                | for iterating_var in sequence:    |
                |    for iterating_var in sequence: |
                |       statements(s)               |
                |    statements(s)                  |
                |===================================|

    The syntax for a nested while loop statement in Python programming language is as follows −
            =========================
            | while expression:     |
            |    while expression:  |
            |       statement(s)    |
            |    statement(s)       |
            =========================

    A final note on loop nesting is that you can put any type of loop inside of any other type of loop. For example a for loop can be inside a while loop or vice versa.

Loop Control Statements
-----------------------
Loop control statements change execution from its normal sequence. When execution leaves a scope, all automatic objects that were created in that scope are destroyed.

Python supports the following control statements. Click the following links to check their detail.

Let us go through the loop control statements briefly

        1 	break statement  ---> Terminates the loop statement and transfers execution to the statement immediately following the loop.
    It terminates the current loop and resumes execution at the next statement, just like the traditional break statement in C.

    The most common use for break is when some external condition is triggered requiring a hasty exit from a loop. The break statement can be used in both while and for loops.

    If you are using nested loops, the break statement stops the execution of the innermost loop and start executing the next line of code after the block.
            Syntax
            |===========|
            |   break   |
            |===========|

        2 	continue statement -> Causes the loop to skip the remainder of its body and immediately retest its condition prior to reiterating.
    It returns the control to the beginning of the while loop.. The continue statement rejects all the remaining statements in the current iteration of the loop and moves the control back to the top of the loop.

    The continue statement can be used in both while and for loops.
            Syntax
            |===========|
            | continue  |
            |===========|

        3 	pass statement   ---> The pass statement in Python is used when a statement is required syntactically but you do not want any command or code to execute.

    It is used when a statement is required syntactically but you do not want any command or code to execute.

    The pass statement is a null operation; nothing happens when it executes. The pass is also useful in places where your code will eventually go, but has not been written yet (e.g., in stubs for example) −
            Syntax
            |===========|
            |   pass    |
            |===========|

                    Python - Numbers
                    -----------------
Number data types store numeric values. They are immutable data types, means that changing the value of a number data type results in a newly allocated object.

Number objects are created when you assign a value to them. For example −

        var1 = 1
        var2 = 10

You can also delete the reference to a number object by using the del statement. The syntax of the del statement is −

        del var1[,var2[,var3[....,varN]]]]

You can delete a single object or multiple objects by using the del statement. For example −

        del var
        del var_a, var_b

Python supports four different numerical types −

        int (signed integers) −--> They are often called just integers or ints, are positive or negative whole numbers with no decimal point.

        long (long integers ) −--> Also called longs, they are integers of unlimited size, written like integers and followed by an uppercase or lowercase L.

        float (floating point real values) −--> Also called floats, they represent real numbers and are written with a decimal point dividing the integer and fractional parts.
                                                Floats may also be in scientific notation, with E or e indicating the power of 10 (2.5e2 = 2.5 x 102 = 250).

        complex (complex numbers) −--> are of the form a + bJ, where a and b are floats and J (or j) represents the square root of -1 (which is an imaginary number).
                                        The real part of the number is a, and the imaginary part is b. Complex numbers are not used much in Python programming.

        Examples ---- Here are some examples of numbers
                |========================================================================
                |   int 	|       long 	            |   float 	    |    complex    |
                |===========|===========================|===============|===============|
                |   10 	    |   51924361L 	            |   0.0 	    |   3.14j       |
                -------------------------------------------------------------------------
                |   100 	|   -0x19323L 	            |   15.20 	    |   45.j        |
                -------------------------------------------------------------------------
                |   -786 	|   0122L 	                |   -21.9 	    |   9.322e-36j  |
                -------------------------------------------------------------------------
                |   080 	|   0xDEFABCECBDAECBFBAEL 	|   32.3+e18 	|   .876j       |
                -------------------------------------------------------------------------
                |   -0490 	|   535633629843L 	        |   -90. 	    |   -.6545+0J   |
                -------------------------------------------------------------------------
                |   -0x260 	|   -052318172735L 	        |   -32.54e100 	|   3e+26J      |
                -------------------------------------------------------------------------
                |   0x69 	|   -4721885298529L 	    |   70.2-E12 	|   4.53e-7j    |
                -------------------------------------------------------------------------

    Python allows you to use a lowercase L with long, but it is recommended that you use only an uppercase L to avoid confusion with the number 1. Python displays long integers with an uppercase L.

    A complex number consists of an ordered pair of real floating point numbers denoted by a + bj, where a is the real part and b is the imaginary part of the complex number.

Number Type Conversion ==>

    Python converts numbers internally in an expression containing mixed types to a common type for evaluation.
    But sometimes, you need to coerce a number explicitly from one type to another to satisfy the requirements of an operator or function parameter.

                *** Type int(x)         to convert x to a plain integer.

                *** Type long(x)        to convert x to a long integer.

                *** Type float(x)       to convert x to a floating-point number.

                *** Type complex(x)     to convert x to a complex number with real part x and imaginary part zero.

                *** Type complex(x, y)  to convert x and y to a complex number with real part x and imaginary part y. x and y are numeric expressions

Mathematical Functions
----------------------
        Python includes following functions that perform mathematical calculations.
                                                    Function & Returns ( description )
    1 	abs(x)                  The absolute value of x: the (positive) distance between x and zero.
    2 	ceil(x)                 The ceiling of x: the smallest integer not less than x
    3 	cmp(x, y)               -1 if x < y, 0 if x == y, or 1 if x > y
    4 	exp(x)                  The exponential of x: ex
    5 	fabs(x)                 The absolute value of x.
    6 	floor(x)                The floor of x: the largest integer not greater than x
    7 	log(x)                  The natural logarithm of x, for x> 0
    8 	log10(x)                The base-10 logarithm of x for x> 0.
    9 	max(x1, x2,...)         The largest of its arguments: the value closest to positive infinity
    10 	min(x1, x2,...)         The smallest of its arguments: the value closest to negative infinity
    11 	modf(x)                 The fractional and integer parts of x in a two-item tuple. Both parts have the same sign as x. The integer part is returned as a float.
    12 	pow(x, y)               The value of x**y.
    13 	round(x [,n])           x rounded to n digits from the decimal point. Python rounds away from zero as a tie-breaker: round(0.5) is 1.0 and round(-0.5) is -1.0.
    14 	sqrt(x)                 The square root of x for x > 0

Random Number Functions
-----------------------
        Random numbers are used for games, simulations, testing, security, and privacy applications. Python includes following functions that are commonly used.
                                    Function & Description
    1 	choice(seq)                         A random item from a list, tuple, or string.
    2 	randrange ([start,] stop [,step])   A randomly selected element from range(start, stop, step)
    3 	random()                            A random float r, such that 0 is less than or equal to r and r is less than 1
    4 	seed([x])                           Sets the integer starting value used in generating random numbers. Call this function before calling any other random module function.
                                            Returns None.
    5 	shuffle(lst)                        Randomizes the items of a list in place. Returns None.
    6 	uniform(x, y)                       A random float r, such that x is less than or equal to r and r is less than y

Trigonometric Functions
-----------------------

        Python includes following functions that perform trigonometric calculations.
                                Function & Description
    1 	acos(x)             Return the arc cosine of x, in radians.
    2 	asin(x)             Return the arc sine of x, in radians.
    3 	atan(x)             Return the arc tangent of x, in radians.
    4 	atan2(y, x)         Return atan(y / x), in radians.
    5 	cos(x)              Return the cosine of x radians.
    6 	hypot(x, y)         Return the Euclidean norm, sqrt(x*x + y*y).
    7 	sin(x)              Return the sine of x radians.
    8 	tan(x)              Return the tangent of x radians.
    9 	degrees(x)          Converts angle x from radians to degrees.
    10 	radians(x)          Converts angle x from degrees to radians.

Mathematical Constants
----------------------

        The module also defines two mathematical constants −
                 Constants & Description
    1   pi  The mathematical constant pi.
    2   e   The mathematical constant e.

                                                    Python - Strings
                                                    ================
Strings are amongst the most popular types in Python. We can create them simply by enclosing characters in quotes. Python treats single quotes the same as double quotes. Creating strings is as simple as assigning a value to a variable. For example −

        var1 = 'Hello World!'
        var2 = "Python Programming"

Accessing Values in Strings -->

    Python does not support a character type; these are treated as strings of length one, thus also considered a substring.

    To access substrings, use the square brackets for slicing along with the index or indices to obtain your substring.

Updating Strings -->

    You can "update" an existing string by (re)assigning a variable to another string.
    The new value can be related to its previous value or to a completely different string altogether.

Escape Characters

    Following table is a list of escape or non-printable characters that can be represented with backslash notation.

    An escape character gets interpreted; in a single quoted as well as double quoted strings.
            =====================================================================================================================
            |   Backslash notation 	| Hexadecimal character |Description                                                        |
            |-------------------------------------------------------------------------------------------------------------------|
            |           \a 	        |       0x07 	        |   Bell or alert                                                   |
            |-------------------------------------------------------------------------------------------------------------------|
            |           \b 	        |       0x08 	        |   Backspace                                                       |
            |-------------------------------------------------------------------------------------------------------------------|
            |           \cx         |       	  	        |   Control-x                                                       |
            |-------------------------------------------------------------------------------------------------------------------|
            |           \C-x        |       	  	        |   Control-x                                                       |
            |-------------------------------------------------------------------------------------------------------------------|
            |           \e 	        |       0x1b 	        |   Escape                                                          |
            |-------------------------------------------------------------------------------------------------------------------|
            |           \f 	        |       0x0c 	        |   Formfeed                                                        |
            |-------------------------------------------------------------------------------------------------------------------|
            |           \M-\C-x     |       	  	        |   Meta-Control-x                                                  |
            |-------------------------------------------------------------------------------------------------------------------|
            |           \n 	        |       0x0a 	        |   Newline                                                         |
            |-------------------------------------------------------------------------------------------------------------------|
            |           \nnn 	  	|                       |   Octal notation, where n is in the range 0.7                     |
            |-------------------------------------------------------------------------------------------------------------------|
            |           \r 	        |       0x0d 	        |   Carriage return                                                 |
            |-------------------------------------------------------------------------------------------------------------------|
            |           \s 	        |       0x20 	        |   Space                                                           |
            |-------------------------------------------------------------------------------------------------------------------|
            |           \t 	        |       0x09 	        |   Tab                                                             |
            |-------------------------------------------------------------------------------------------------------------------|
            |           \v 	        |       0x0b 	        |   Vertical tab                                                    |
            |-------------------------------------------------------------------------------------------------------------------|
            |           \x 	  	    |                       |   Character x                                                     |
            |-------------------------------------------------------------------------------------------------------------------|
            |           \xnn 	  	|                       |   Hexadecimal notation, where n is in the range 0.9, a.f, or A.F  |
            |-------------------------------------------------------------------------------------------------------------------|
String Special Operators

            Assume string variable a holds 'Hello' and variable b holds 'Python', then −
            =====================================================================================================================================================================================
            | Operator 	|                                       Description 	                                                                |           Example                             |
            |-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
            |   + 	    | Concatenation - Adds values on either side of the operator 	                                                        | a + b will give HelloPython                   |
            |-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
            |   * 	    | Repetition - Creates new strings, concatenating multiple copies of the same string 	                                | a*2 will give -HelloHello                     |
            |-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
            |   [] 	    | Slice - Gives the character from the given index 	                                                                    | a[1] will give e                              |
            |-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
            |   [ : ] 	| Range Slice - Gives the characters from the given range 	                                                            | a[1:4] will give ell                          |
            |-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
            |   in 	    | Membership - Returns true if a character exists in the given string 	                                                | H in a will give 1                            |
            |-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
            |   not in 	| Membership - Returns true if a character does not exist in the given string 	                                        | M not in a will give 1                        |
            |-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
            |   r/R 	| Raw String - Suppresses actual meaning of Escape characters.                                                          | print r'\n' prints \n and print R'\n'prints \n|
            |           |   The syntax for raw strings is exactly the same as for normal strings with the exception of the raw string operator, |                                               |
            |           |   the letter "r," which precedes the quotation marks. The "r" can be                                                  |                                               |
            |           |   lowercase (r) or uppercase (R) and must be placed immediately preceding the first quote mark.                       |                                               |
            |-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
            |   % 	    | Format - Performs String formatting 	                                                                                | See at next section                           |
            |-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

String Formatting Operator

       One of Python's coolest features is the string format operator %. This operator is unique to strings and makes up for the pack of having functions from C's printf() family.
            the list of complete set of symbols which can be used along with % −
            ========================================================================|
            | Format Symbol |  	Conversion                                          |
            |---------------|-------------------------------------------------------|
            |   %c 	        |   character                                           |
            |---------------|-------------------------------------------------------|
            |   %s 	        |   string conversion via str() prior to formatting     |
            |---------------|-------------------------------------------------------|
            |   %i 	        |   signed decimal integer                              |
            |---------------|-------------------------------------------------------|
            |   %d 	        |   signed decimal integer                              |
            |---------------|-------------------------------------------------------|
            |   %u 	        |   unsigned decimal integer                            |
            |---------------|-------------------------------------------------------|
            |   %o 	        |   octal integer                                       |
            |---------------|-------------------------------------------------------|
            |   %x 	        |   hexadecimal integer (lowercase letters)             |
            |---------------|-------------------------------------------------------|
            |   %X 	        |   hexadecimal integer (UPPERcase letters)             |
            |---------------|-------------------------------------------------------|
            |   %e 	        |   exponential notation (with lowercase 'e')           |
            |---------------|-------------------------------------------------------|
            |   %E 	        |   exponential notation (with UPPERcase 'E')           |
            |---------------|-------------------------------------------------------|
            |   %f 	        |   floating point real number                          |
            |---------------|-------------------------------------------------------|
            |   %g 	        |   the shorter of %f and %e                            |
            |---------------|-------------------------------------------------------|
            |   %G 	        |   the shorter of %f and %E                            |
            |-----------------------------------------------------------------------|

Other supported symbols and functionality are listed in the following table −
            =====================================================================================================================================
            |   Symbol 	|   Functionality                                                                                                       |
            |-----------|-----------------------------------------------------------------------------------------------------------------------|
            |   * 	    |   argument specifies width or precision                                                                               |
            |-----------|-----------------------------------------------------------------------------------------------------------------------|
            |   - 	    |   left justification                                                                                                  |
            |-----------|-----------------------------------------------------------------------------------------------------------------------|
            |   + 	    |   display the sign                                                                                                    |
            |-----------|-----------------------------------------------------------------------------------------------------------------------|
            |   <sp> 	|   leave a blank space before a positive number                                                                        |
            |-----------|-----------------------------------------------------------------------------------------------------------------------|
            |   # 	    |   add the octal leading zero ( '0' ) or hexadecimal leading '0x' or '0X', depending on whether 'x' or 'X' were used.  |
            |-----------|-----------------------------------------------------------------------------------------------------------------------|
            |   0 	    |   pad from left with zeros (instead of spaces)                                                                        |
            |-----------|-----------------------------------------------------------------------------------------------------------------------|
            |   % 	    |   '%%' leaves you with a single literal '%'                                                                           |
            |-----------|-----------------------------------------------------------------------------------------------------------------------|
            |   (var) 	|   mapping variable (dictionary arguments)                                                                             |
            |-----------|-----------------------------------------------------------------------------------------------------------------------|
            |   m.n. 	|   m is the minimum total width and n is the number of digits to display after the decimal point (if appl.)            |
            |-----------|-----------------------------------------------------------------------------------------------------------------------|

Triple Quotes

    Python's triple quotes comes to the rescue by allowing strings to span multiple lines, including verbatim NEWLINEs, TABs, and any other special characters.

    The syntax for triple quotes consists of three consecutive single or double quotes.

Unicode String

    Normal strings in Python are stored internally as 8-bit ASCII, while Unicode strings are stored as 16-bit Unicode. This allows for a more varied set of characters, including special characters from most languages in the world.

    Built-in String Methods

    Python includes the following built-in methods to manipulate strings −
    =====================================================================================================================================================================================
    |        |               Methods                      |    Description                                                                                                              |
    |--------|--------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------|
    | 1 	 |   capitalize()                             | Capitalizes first letter of string                                                                                          |
    |--------|--------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------|
    | 2 	 |   center(width, fillchar)                  | Returns a space-padded string with the original string centered to a total of width columns.                                |
    |--------|--------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------|
    | 3 	 |   count(str, beg= 0,end=len(string))       | Counts how many times str occurs in string or in a substring of string if starting index beg and ending index end are given.|
    |--------|--------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------|
    | 4 	 |   decode(encoding='UTF-8',errors='strict') | Decodes the string using the codec registered for encoding. encoding defaults to the default string encoding.               |
    |--------|--------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------|
    | 5 	 |   encode(encoding='UTF-8',errors='strict') | Returns encoded string version of string; on error, default is to raise a ValueError unless errors is given with 'ignore' or|
    |        |                                            |   'replace'.                                                                                                                |
    |--------|--------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------|
    | 6 	 |   endswith(suffix, beg=0, end=len(string)) | Determines if string or a substring of string (if starting index beg and ending index end are given) ends with suffix;      |
    |        |                                            |     returns true if so and false otherwise.                                                                                 |
    |--------|--------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------|
    | 7 	 |   expandtabs(tabsize=8)                    | Expands tabs in string to multiple spaces; defaults to 8 spaces per tab if tabsize not provided.                            |
    |--------|--------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------|
    | 8 	 |   find(str, beg=0 end=len(string))         | Determine if str occurs in string or in a substring of string if starting index beg and ending index end are given returns  |
    |        |                                            |     index if found and -1 otherwise.                                                                                        |
    |--------|--------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------|
    | 9 	 |   index(str, beg=0, end=len(string))       | Same as find(), but raises an exception if str not found.                                                                   |
    |--------|--------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------|
    | 10 	 |   isalnum()                                | Returns true if string has at least 1 character and all characters are alphanumeric and false otherwise.                    |
    |--------|--------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------|
    | 11 	 |   isalpha()                                | Returns true if string has at least 1 character and all characters are alphabetic and false otherwise.                      |
    |--------|--------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------|
    | 12 	 |   isdigit()                                | Returns true if string contains only digits and false otherwise.                                                            |
    |--------|--------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------|
    | 13 	 |   islower()                                | Returns true if string has at least 1 cased character and all cased characters are in lowercase and false otherwise.        |
    |--------|--------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------|
    | 14 	 |   isnumeric()                              | Returns true if a unicode string contains only numeric characters and false otherwise.                                      |
    |--------|--------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------|
    | 15 	 |   isspace()                                | Returns true if string contains only whitespace characters and false otherwise.                                             |
    |--------|--------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------|
    | 16 	 |   istitle()                                | Returns true if string is properly "titlecased" and false otherwise.                                                        |
    |--------|--------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------|
    | 17 	 |   isupper()                                | Returns true if string has at least one cased character and all cased characters are in uppercase and false otherwise.      |
    |--------|--------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------|
    | 18 	 |   join(seq)                                | Merges (concatenates) the string representations of elements in sequence seq into a string, with separator string.          |
    |--------|--------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------|
    | 19 	 |   len(string)                              | Returns the length of the string                                                                                            |
    |--------|--------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------|
    | 20 	 |   ljust(width[, fillchar])                 | Returns a space-padded string with the original string left-justified to a total of width columns.                          |
    |--------|--------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------|
    | 21 	 |   lower()                                  | Converts all uppercase letters in string to lowercase.                                                                      |
    |--------|--------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------|
    | 22 	 |   lstrip()                                 | Removes all leading whitespace in string.                                                                                   |
    |--------|--------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------|
    | 23 	 |   maketrans()                              | Returns a translation table to be used in translate function.                                                               |
    |--------|--------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------|
    | 24 	 |   max(str)                                 | Returns the max alphabetical character from the string str.                                                                 |
    |--------|--------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------|
    | 25 	 |   min(str)                                 | Returns the min alphabetical character from the string str.                                                                 |
    |--------|--------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------|
    | 26 	 |   replace(old, new [, max])                | Replaces all occurrences of old in string with new or at most max occurrences if max given.                                 |
    |--------|--------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------|
    | 27 	 |   rfind(str, beg=0,end=len(string))        | Same as find(), but search backwards in string.                                                                             |
    |--------|--------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------|
    | 28 	 |   rindex( str, beg=0, end=len(string))     | Same as index(), but search backwards in string.                                                                            |
    |--------|--------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------|
    | 29 	 |   rjust(width,[, fillchar])                | Returns a space-padded string with the original string right-justified to a total of width columns.                         |
    |--------|--------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------|
    | 30 	 |   rstrip()                                 | Removes all trailing whitespace of string.                                                                                  |
    |--------|--------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------|
    | 31 	 |   split(str="", num=string.count(str))     | Splits string according to delimiter str (space if not provided) and returns list of substrings; split into at most num     |
    |        |                                            |     substrings if given.                                                                                                    |
    |--------|--------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------|
    | 32 	 |   splitlines( num=string.count('\n'))      | Splits string at all (or num) NEWLINEs and returns a list of each line with NEWLINEs removed.                               |
    |--------|--------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------|
    | 33 	 |   startswith(str, beg=0,end=len(string))   | Determines if string or a substring of string (if starting index beg and ending index end are given) starts with substring  |
    |        |                                            |  str; returns true if so and false otherwise.                                                                               |
    |--------|--------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------|
    | 34 	 |   strip([chars])                           | Performs both lstrip() and rstrip() on string.                                                                              |
    |--------|--------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------|
    | 35 	 |   swapcase()                               | Inverts case for all letters in string.                                                                                     |
    |--------|--------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------|
    | 36 	 |   title()                                  | Returns "titlecased" version of string, that is, all words begin with uppercase and the rest are lowercase.                 |
    |--------|--------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------|
    | 37 	 |   translate(table, deletechars="")         | Translates string according to translation table str(256 chars), removing those in the del string.                          |
    |--------|--------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------|
    | 38 	 |   upper()                                  | Converts lowercase letters in string to uppercase.                                                                          |
    |--------|--------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------|
    | 39 	 |   zfill (width)                            | Returns original string leftpadded with zeros to a total of width characters; intended for numbers, zfill() retains any sign|
    |        |                                            |  given (less one zero).                                                                                                     |
    |--------|--------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------|
    | 40 	 |   isdecimal()                              | Returns true if a unicode string contains only decimal characters and false otherwise.                                      |
    |--------|--------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------|

                                                            Python - Lists
                                                            ===============
The most basic data structure in Python is the sequence. Each element of a sequence is assigned a number - its position or index. The first index is zero,
the second index is one, and so forth.

Python has six built-in types of sequences, but the most common ones are lists and tuples, which we would see in this tutorial.

There are certain things you can do with all sequence types. These operations include indexing, slicing, adding, multiplying, and checking for membership. In addition,
Python has built-in functions for finding the length of a sequence and for finding its largest and smallest elements.

Python Lists

The list is a most versatile datatype available in Python which can be written as a list of comma-separated values (items) between square brackets.
Important thing about a list is that items in a list need not be of the same type.

Creating a list is as simple as putting different comma-separated values between square brackets. For example −

            list1 = ['physics', 'chemistry', 1997, 2000];
            list2 = [1, 2, 3, 4, 5 ];
            list3 = ["a", "b", "c", "d"]

Similar to string indices, list indices start at 0, and lists can be sliced, concatenated and so on.

Accessing Values in Lists
    To access values in lists, use the square brackets for slicing along with the index or indices to obtain value available at that index.

Updating Lists
    You can update single or multiple elements of lists by giving the slice on the left-hand side of the assignment operator,
    and you can add to elements in a list with the append() method.

Delete List Elements
    To remove a list element, you can use either the del statement if you know exactly which element(s) you are deleting or the remove() method if you do not know.

Basic List Operations

        Lists respond to the + and * operators much like strings; they mean concatenation and repetition here too, except that the result is a new list, not a string.

        In fact, lists respond to all of the general sequence operations we used on strings in the prior chapter.
        ====================================================================================|
        |   Python Expression 	            |   Results 	                | Description   |
        |-----------------------------------|-------------------------------|---------------|
        |   len([1, 2, 3]) 	                |   3 	                        | Length        |
        |-----------------------------------|-------------------------------|---------------|
        |   [1, 2, 3] + [4, 5, 6] 	        |[1, 2, 3, 4, 5, 6] 	        | Concatenation |
        |-----------------------------------|-------------------------------|---------------|
        |   ['Hi!'] * 4 	                |['Hi!', 'Hi!', 'Hi!', 'Hi!'] 	| Repetition    |
        |-----------------------------------|-------------------------------|---------------|
        |   3 in [1, 2, 3] 	                |   True 	                    | Membership    |
        |-----------------------------------|-------------------------------|---------------|
        |   for x in [1, 2, 3]: print x, 	|   1 2 3 	                    | Iteration     |
        |-----------------------------------|-------------------------------|---------------|

Indexing, Slicing, and Matrixes

    Because lists are sequences, indexing and slicing work the same way for lists as they do for strings.

    Assuming following input −

            L = ['spam', 'Spam', 'SPAM!']
        =============================================================================
        |   Python Expression 	|   Results 	        | Description               |
        |-----------------------|-----------------------|---------------------------|
        |   L[2] 	            | SPAM! 	            | Offsets start at zero     |
        |-----------------------|-----------------------|---------------------------|
        |   L[-2] 	            | Spam 	Negative:       | count from the right      |
        |-----------------------|-----------------------|---------------------------|
        |   L[1:] 	            | ['Spam', 'SPAM!'] 	| Slicing fetches sections  |
        |-----------------------|-----------------------|---------------------------|

Built-in List Functions & Methods

Python includes the following list functions −
        ================================================================================|
        | 	    |   Function            |  Description                                  |
        |-------|-----------------------|-----------------------------------------------|
        |   1 	|   cmp(list1, list2)   | Compares elements of both lists.              |
        |-------|-----------------------|-----------------------------------------------|
        |   2 	|   len(list)           | Gives the total length of the list.           |
        |-------|-----------------------|-----------------------------------------------|
        |   3 	|   max(list)           | Returns item from the list with max value.    |
        |-------|-----------------------|-----------------------------------------------|
        |   4 	|   min(list)           | Returns item from the list with min value.    |
        |-------|-----------------------|-----------------------------------------------|
        |   5 	|   list(seq)           | Converts a tuple into list.                   |
        |-------|-----------------------|-----------------------------------------------|


Python includes following list methods
        =============================================================================================
        |       |    	Methods             |    Description                                        |
        |-------|---------------------------|-------------------------------------------------------|
        |   1 	|   list.append(obj)        |   Appends object obj to list                          |
        |-------|---------------------------|-------------------------------------------------------|
        |   2 	|   list.count(obj)         |   Returns count of how many times obj occurs in list  |
        |-------|---------------------------|-------------------------------------------------------|
        |   3 	|   list.extend(seq)        |   Appends the contents of seq to list                 |
        |-------|---------------------------|-------------------------------------------------------|
        |   4 	|   list.index(obj)         |   Returns the lowest index in list that obj appears   |
        |-------|---------------------------|-------------------------------------------------------|
        |   5 	|   list.insert(index, obj) |   Inserts object obj into list at offset index        |
        |-------|---------------------------|-------------------------------------------------------|
        |   6 	|   list.pop(obj=list[-1])  |   Removes and returns last object or obj from list    |
        |-------|---------------------------|-------------------------------------------------------|
        |   7 	|   list.remove(obj)        |   Removes object obj from list                        |
        |-------|---------------------------|-------------------------------------------------------|
        |   8 	|   list.reverse()          |   Reverses objects of list in place                   |
        |-------|---------------------------|-------------------------------------------------------|
        |   9 	|   list.sort([func])       |   Sorts objects of list, use compare func if given    |
        |-------|---------------------------|-------------------------------------------------------|

                                                    Python - Tuples
                                                    ===============
A tuple is a sequence of immutable Python objects. Tuples are sequences, just like lists. The differences between tuples and lists are, the tuples cannot be changed unlike lists and tuples use parentheses, whereas lists use square brackets.

Creating a tuple is as simple as putting different comma-separated values. Optionally you can put these comma-separated values between parentheses also. For example −

            tup1 = ('physics', 'chemistry', 1997, 2000);
            tup2 = (1, 2, 3, 4, 5 );
            tup3 = "a", "b", "c", "d";

The empty tuple is written as two parentheses containing nothing −

    tup1 = ();

To write a tuple containing a single value you have to include a comma, even though there is only one value −

    tup1 = (50,);

Like string indices, tuple indices start at 0, and they can be sliced, concatenated, and so on.

Accessing Values in Tuples
    To access values in tuple, use the square brackets for slicing along with the index or indices to obtain value available at that index.

Updating Tuples
    Tuples are immutable which means you cannot update or change the values of tuple elements. You are able to take portions of existing tuples to create new tuples

Delete Tuple Elements
    Removing individual tuple elements is not possible. There is, of course, nothing wrong with putting together another tuple with the undesired elements discarded.

            Basic Tuples Operations

Tuples respond to the + and * operators much like strings; they mean concatenation and repetition here too, except that the result is a new tuple, not a string.

In fact, tuples respond to all of the general sequence operations we used on strings in the prior chapter −
        =========================================================================================
        | Python Expression 	            | Results 	                        | Description   |
        |-----------------------------------|-----------------------------------|---------------|
        | len((1, 2, 3)) 	                | 3 	                            | Length        |
        |-----------------------------------|-----------------------------------|---------------|
        | (1, 2, 3) + (4, 5, 6) 	        | (1, 2, 3, 4, 5, 6) 	            | Concatenation |
        |-----------------------------------|-----------------------------------|---------------|
        | ('Hi!',) * 4 	                    | ('Hi!', 'Hi!', 'Hi!', 'Hi!') 	    | Repetition    |
        |-----------------------------------|-----------------------------------|---------------|
        | 3 in (1, 2, 3) 	                | True 	                            | Membership    |
        |-----------------------------------|-----------------------------------|---------------|
        | for x in (1, 2, 3): print x, 	    | 1 2 3 	                        | Iteration     |
        |-----------------------------------|-----------------------------------|---------------|

Indexing, Slicing, and Matrixes

Because tuples are sequences, indexing and slicing work the same way for tuples as they do for strings. Assuming following input −

    L = ('spam', 'Spam', 'SPAM!')
            =====================================================================================
            | Python Expression 	|     Results 	        | Description                       |
            |-----------------------|-----------------------|-----------------------------------|
            |     L[2] 	            | 'SPAM!' 	            | Offsets start at zero             |
            |-----------------------|-----------------------|-----------------------------------|
            |     L[-2] 	        | 'Spam' 	            | Negative: count from the right    |
            |-----------------------|-----------------------|-----------------------------------|
            |     L[1:] 	        | ['Spam', 'SPAM!'] 	| Slicing fetches sections          |
            |-----------------------|-----------------------|-----------------------------------|

No Enclosing Delimiters

    Any set of multiple objects, comma-separated, written without identifying symbols, i.e., brackets for lists, parentheses for tuples, etc.

Built-in Tuple Functions

        Python includes the following tuple functions −

        ====================================================================================|
        |       |         Function             | Description                                |
        |-------|------------------------------|--------------------------------------------|
        | 1 	| cmp(tuple1, tuple2)          | Compares elements of both tuples.          |
        |-------|------------------------------|--------------------------------------------|
        | 2 	| len(tuple)                   | Gives the total length of the tuple.       |
        |-------|------------------------------|--------------------------------------------|
        | 3 	| max(tuple)                   | Returns item from the tuple with max value.|
        |-------|------------------------------|--------------------------------------------|
        | 4 	| min(tuple)                   | Returns item from the tuple with min value.|
        |-------|------------------------------|--------------------------------------------|
        | 5 	| tuple(seq)                   | Converts a list into tuple.                |
        |-------|------------------------------|--------------------------------------------|

                                    Python - Dictionary
                                    ===================
Each key is separated from its value by a colon (:), the items are separated by commas, and the whole thing is enclosed in curly braces.
An empty dictionary without any items is written with just two curly braces, like this: {}.

Keys are unique within a dictionary while values may not be. The values of a dictionary can be of any type, but the keys must be of an immutable data type such as strings,
numbers, or tuples.

Accessing Values in Dictionary
    To access dictionary elements, you can use the familiar square brackets along with the key to obtain its value.

            If we attempt to access a data item with a key, which is not part of the dictionary, we get an error
                    dict = {'Name': 'Zara', 'Age': 7, 'Class': 'First'}
                    print "dict['Alice']: ", dict['Alice']

Updating Dictionary
    You can update a dictionary by adding a new entry or a key-value pair, modifying an existing entry, or deleting an existing entry

Delete Dictionary Elements
    You can either remove individual dictionary elements or clear the entire contents of a dictionary. You can also delete entire dictionary in a single operation.
        To explicitly remove an entire dictionary, just use the del statement.

Properties of Dictionary Keys
    Dictionary values have no restrictions. They can be any arbitrary Python object, either standard objects or user-defined objects. However, same is not true for the keys.
        There are two important points to remember about dictionary keys −
(a) More than one entry per key not allowed. Which means no duplicate key is allowed. When duplicate keys encountered during assignment, the last assignment wins.
(b) Keys must be immutable. Which means you can use strings, numbers or tuples as dictionary keys but something like ['key'] is not allowed.

Built-in Dictionary Functions & Methods

Python includes the following dictionary functions −
        =========================================================================================================================================================
        |    	|   Function            |                Description                                                                                            |
        |-------|-----------------------|-----------------------------------------------------------------------------------------------------------------------|
        |   1 	|   cmp(dict1, dict2)   |   Compares elements of both dict.                                                                                     |
        |-------|-----------------------|-----------------------------------------------------------------------------------------------------------------------|
        |   2 	|   len(dict)           |   Gives the total length of the dictionary. This would be equal to the number of items in the dictionary.             |
        |-------|-----------------------|-----------------------------------------------------------------------------------------------------------------------|
        |   3 	|   str(dict)           |   Produces a printable string representation of a dictionary                                                          |
        |-------|-----------------------|-----------------------------------------------------------------------------------------------------------------------|
        |   4 	|   type(variable)      |   Returns the type of the passed variable. If passed variable is dictionary, then it would return a dictionary type.  |
        |-------|-----------------------|-----------------------------------------------------------------------------------------------------------------------|

Python includes following dictionary methods −
    =====================================================================================================================================
    |       |   Methods                             |        Description                                                                |
    |-------|---------------------------------------|-----------------------------------------------------------------------------------|
    |   1 	|   dict.clear()                        |   Removes all elements of dictionary dict                                         |
    |-------|---------------------------------------|-----------------------------------------------------------------------------------|
    |   2 	|   dict.copy()                         |   Returns a shallow copy of dictionary dict                                       |
    |-------|---------------------------------------|-----------------------------------------------------------------------------------|
    |   3 	|   dict.fromkeys()                     |   Create a new dictionary with keys from seq and values set to value.             |
    |-------|---------------------------------------|-----------------------------------------------------------------------------------|
    |   4 	|   dict.get(key, default=None)         |   For key key, returns value or default if key not in dictionary                  |
    |-------|---------------------------------------|-----------------------------------------------------------------------------------|
    |   5 	|   dict.has_key(key)                   |   Returns true if key in dictionary dict, false otherwise                         |
    |-------|---------------------------------------|-----------------------------------------------------------------------------------|
    |   6 	|   dict.items()                        |   Returns a list of dict's (key, value) tuple pairs                               |
    |-------|---------------------------------------|-----------------------------------------------------------------------------------|
    |   7 	|   dict.keys()                         |   Returns list of dictionary dict's keys                                          |
    |-------|---------------------------------------|-----------------------------------------------------------------------------------|
    |   8 	|   dict.setdefault(key, default=None)  |   Similar to get(), but will set dict[key]=default if key is not already in dict  |
    |-------|---------------------------------------|-----------------------------------------------------------------------------------|
    |   9 	|   dict.update(dict2)                  |   Adds dictionary dict2's key-values pairs to dict                                |
    |-------|---------------------------------------|-----------------------------------------------------------------------------------|
    |   10 	|   dict.values()                       |   Returns list of dictionary dict's values                                        |
    |-------|---------------------------------------|-----------------------------------------------------------------------------------|

                                                Python - Date & Time
                                                ====================
A Python program can handle date and time in several ways. Converting between date formats is a common chore for computers.
Python's time and calendar modules help track dates and times.
    What is Tick?
        Time intervals are floating-point numbers in units of seconds. Particular instants in time are expressed in seconds since 12:00am, January 1, 1970(epoch).
        There is a popular time module available in Python which provides functions for working with times, and for converting between representations.
        The function time.time() returns the current system time in ticks since 12:00am, January 1, 1970(epoch).

Date arithmetic is easy to do with ticks. However, dates before the epoch cannot be represented in this form. Dates in the far future also cannot be represented this way - the cutoff point is sometime in 2038 for UNIX and Windows.

What is TimeTuple?

Many of Python's time functions handle time as a tuple of 9 numbers, as shown below −
        =====================================================================================
        |   Index 	|   Field 	            |   Values                                      |
        |-----------|-----------------------|-----------------------------------------------|
        |   0 	    |   4-digit year 	    |   2008                                        |
        |-----------|-----------------------|-----------------------------------------------|
        |   1 	    |   Month 	            |   1 to 12                                     |
        |-----------|-----------------------|-----------------------------------------------|
        |   2 	    |   Day 	            |   1 to 31                                     |
        |-----------|-----------------------|-----------------------------------------------|
        |   3 	    |   Hour 	            |   0 to 23                                     |
        |-----------|-----------------------|-----------------------------------------------|
        |   4 	    |   Minute 	            |   0 to 59                                     |
        |-----------|-----------------------|-----------------------------------------------|
        |   5 	    |   Second 	            |   0 to 61 (60 or 61 are leap-seconds)         |
        |-----------|-----------------------|-----------------------------------------------|
        |   6 	    |   Day of Week 	    |   0 to 6 (0 is Monday)                        |
        |-----------|-----------------------|-----------------------------------------------|
        |   7 	    |   Day of year 	    |   1 to 366 (Julian day)                       |
        |-----------|-----------------------|-----------------------------------------------|
        |   8 	    |   Daylight savings 	|   -1, 0, 1, -1 means library determines DST   |
        |-----------|-----------------------|-----------------------------------------------|

The above tuple is equivalent to struct_time structure. This structure has following attributes −
            ========================================================================
            | Index |	Attributes |                Values                         |
            |-------|--------------|-----------------------------------------------|
            |   0 	|   tm_year    |     2008                                      |
            |-------|--------------|-----------------------------------------------|
            |   1 	|   tm_mon     |     1 to 12                                   |
            |-------|--------------|-----------------------------------------------|
            |   2 	|   tm_mday    |     1 to 31                                   |
            |-------|--------------|-----------------------------------------------|
            |   3 	|   tm_hour    |     0 to 23                                   |
            |-------|--------------|-----------------------------------------------|
            |   4 	|   tm_min 	   |     0 to 59                                   |
            |-------|--------------|-----------------------------------------------|
            |   5 	|   tm_sec 	   |     0 to 61 (60 or 61 are leap-seconds)       |
            |-------|--------------|-----------------------------------------------|
            |   6 	|   tm_wday    |     0 to 6 (0 is Monday)                      |
            |-------|--------------|-----------------------------------------------|
            |   7 	|   tm_yday    |     1 to 366 (Julian day)                     |
            |-------|--------------|-----------------------------------------------|
            |   8 	|   tm_isdst   |     -1, 0, 1, -1 means library determines DST |
            |-------|--------------|-----------------------------------------------|

Getting current time
    To translate a time instant from a seconds since the epoch floating-point value into a time-tuple, pass the floating-point value to a function (e.g., localtime)
    that returns a time-tuple with all nine items valid.

Getting formatted time
    You can format any time as per your requirement, but simple method to get time in readable format is asctime()

Getting calendar for a month
    The calendar module gives a wide range of methods to play with yearly and monthly calendars.


The time Module

There is a popular time module available in Python which provides functions for working with times and for converting between representations. Here is the list of all available methods −
    ========================================================================================================================================================================================
    |       |   Function                                        |                                                   Description                                                            |
    |-------|---------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------|
    |   1 	|   time.altzone                                    |   The offset of the local DST timezone, in seconds west of UTC, if one is defined. This is negative if the local DST     |
    |       |                                                   | timezone is east of UTC (as in Western Europe, including the UK). Only use this if daylight is nonzero.                  |
    |-------|---------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------|
    |   2 	|   time.asctime([tupletime])                       |   Accepts a time-tuple and returns a readable 24-character string such as 'Tue Dec 11 18:07:14 2008'.                    |
    |-------|---------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------|
    |   3 	|   time.clock( )                                   |   Returns the current CPU time as a floating-point number of seconds. To measure computational costs of                  |
    |       |                                                   | different approaches, the value of time.clock is more useful than that of time.time().                                   |
    |-------|---------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------|
    |   4 	|   time.ctime([secs])                              |   Like asctime(localtime(secs)) and without arguments is like asctime( )                                                 |
    |-------|---------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------|
    |   5 	|   time.gmtime([secs])                             |   Accepts an instant expressed in seconds since the epoch and returns a time-tuple t with the UTC time.                  |
    |       |                                                   | Note : t.tm_isdst is always 0                                                                                            |
    |-------|---------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------|
    |   6 	|   time.localtime([secs])                          |   Accepts an instant expressed in seconds since the epoch and returns a time-tuple t with the local time                 |
    |       |                                                   | (t.tm_isdst is 0 or 1, depending on whether DST applies to instant secs by local rules).                                 |
    |-------|---------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------|
    |   7 	|   time.mktime(tupletime)                          |   Accepts an instant expressed as a time-tuple in local time and returns a floating-point value with the                 |
    |       |                                                   | instant expressed in seconds since the epoch.                                                                            |
    |-------|---------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------|
    |   8 	|   time.sleep(secs)                                |   Suspends the calling thread for secs seconds.                                                                          |
    |-------|---------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------|
    |   9 	|   time.strftime(fmt[,tupletime])                  |   Accepts an instant expressed as a time-tuple in local time and returns a string representing the instant               |
    |       |                                                   | as specified by string fmt.                                                                                              |
    |-------|---------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------|
    |   10 	|   time.strptime(str,fmt='%a %b %d %H:%M:%S %Y')   |   Parses str according to format string fmt and returns the instant in time-tuple format.                                |
    |-------|---------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------|
    |   11 	|   time.time( )                                    |   Returns the current time instant, a floating-point number of seconds since the epoch.                                  |
    |-------|---------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------|
    |   12 	|   time.tzset( )                                   |   Resets the time conversion rules used by the library routines. The environment variable TZ specifies how this is done. |
    |-------|---------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------|

Let us go through the functions briefly −

    There are following two important attributes available with time module −
        Attribute with Description
    1   time.timezone   Attribute time.timezone is the offset in seconds of the local time zone (without DST) from UTC (>0 in the Americas; <=0 in most of Europe, Asia, Africa).
    2   time.tzname Attribute time.tzname is a pair of locale-dependent strings, which are the names of the local time zone without and with DST, respectively.

The calendar Module

    The calendar module supplies calendar-related functions, including functions to print a text calendar for a given month or year.

    By default, calendar takes Monday as the first day of the week and Sunday as the last one. To change this, call calendar.setfirstweekday() function.

    Here is a list of functions available with the calendar module −
 	                    Function with Description
    1   calendar.calendar(year,w=2,l=1,c=6) ---> Returns a multiline string with a calendar for year year formatted into three columns separated
                        by c spaces. w is the width in characters of each date; each line has length 21*w+18+2*c. l is the number of lines for each week.

    2   calendar.firstweekday( )    ---> Returns the current setting for the weekday that starts each week. By default, when calendar is first imported,
                        this is 0, meaning Monday.

    3   calendar.isleap(year)   ---> Returns True if year is a leap year; otherwise, False.

    4   calendar.leapdays(y1,y2)    ---> Returns the total number of leap days in the years within range(y1,y2).

    5   calendar.month(year,month,w=2,l=1)  ---> Returns a multiline string with a calendar for month month of year year, one line per week plus
                        two header lines. w is the width in characters of each date; each line has length 7*w+6. l is the number of lines for each week.
    6   calendar.monthcalendar(year,month)  ---> Returns a list of lists of ints. Each sublist denotes a week. Days outside month month of year year
                        are set to 0; days within the month are set to their day-of-month, 1 and up.
    7   calendar.monthrange(year,month) ---> Returns two integers. The first one is the code of the weekday for the first day of the month month in
                    year year; the second one is the number of days in the month. Weekday codes are 0 (Monday) to 6 (Sunday); month numbers are 1 to 12.
    8   calendar.prcal(year,w=2,l=1,c=6)    ---> Like print calendar.calendar(year,w,l,c).

    9   calendar.prmonth(year,month,w=2,l=1)    ---> Like print calendar.month(year,month,w,l).

    10  calendar.setfirstweekday(weekday)   ---> Sets the first day of each week to weekday code weekday. Weekday codes are 0 (Monday) to 6 (Sunday).

    11  calendar.timegm(tupletime)  ---> The inverse of time.gmtime: accepts a time instant in time-tuple form and returns the same instant as a
                                            floating-point number of seconds since the epoch.
    12  calendar.weekday(year,month,day)    ---> Returns the weekday code for the given date. Weekday codes are 0 (Monday) to 6 (Sunday);
                                            month numbers are 1 (January) to 12 (December).
Other Modules & Functions

If you are interested, then here you would find a list of other important modules and functions to play with date & time in Python −

    The datetime Module

    The pytz Module

    The dateutil Module


                                                    Python - Functions
                                                    ==================
A function is a block of organized, reusable code that is used to perform a single, related action. Functions provide better modularity for your application and a high degree of code reusing.

As you already know, Python gives you many built-in functions like print(), etc. but you can also create your own functions. These functions are called user-defined functions.
Defining a Function

You can define functions to provide the required functionality. Here are simple rules to define a function in Python.

    Function blocks begin with the keyword def followed by the function name and parentheses ( ( ) ).

    Any input parameters or arguments should be placed within these parentheses. You can also define parameters inside these parentheses.

    The first statement of a function can be an optional statement - the documentation string of the function or docstring.

    The code block within every function starts with a colon (:) and is indented.

    The statement return [expression] exits a function, optionally passing back an expression to the caller. A return statement with no arguments is the same as return None.

Syntax

def functionname( parameters ):
   "function_docstring"
   function_suite
   return [expression]

By default, parameters have a positional behavior and you need to inform them in the same order that they were defined.

Calling a Function
    Defining a function only gives it a name, specifies the parameters that are to be included in the function and structures the blocks of code.
    Once the basic structure of a function is finalized, you can execute it by calling it from another function or directly from the Python prompt.

Pass by reference vs value
    All parameters (arguments) in the Python language are passed by reference.
    It means if you change what a parameter refers to within a function, the change also reflects back in the calling function.

Function Arguments

You can call a function by using the following types of formal arguments −

    Required arguments
    Keyword arguments
    Default arguments
    Variable-length arguments

Required arguments
    Required arguments are the arguments passed to a function in correct positional order.
    Here, the number of arguments in the function call should match exactly with the function definition.

Keyword arguments
    Keyword arguments are related to the function calls. When you use keyword arguments in a function call,
    the caller identifies the arguments by the parameter name.
    This allows you to skip arguments or place them out of order because the Python interpreter is able to use the keywords provided to
    match the values with parameters.

Default arguments
    A default argument is an argument that assumes a default value if a value is not provided in the function call for that argument.

Variable-length arguments
    You may need to process a function for more arguments than you specified while defining the function. These arguments are called variable-length
    arguments and are not named in the function definition, unlike required and default arguments.

    Syntax for a function with non-keyword variable arguments is this −

            def functionname([formal_args,] *var_args_tuple ):
               "function_docstring"
               function_suite
               return [expression]

    An asterisk (*) is placed before the variable name that holds the values of all nonkeyword variable arguments.
    This tuple remains empty if no additional arguments are specified during the function call.

The Anonymous Functions

These functions are called anonymous because they are not declared in the standard manner by using the def keyword. You can use the lambda keyword to
create small anonymous functions.

  Lambda forms can take any number of arguments but return just one value in the form of an expression. They cannot contain commands or
    multiple expressions.
  An anonymous function cannot be a direct call to print because lambda requires an expression.
  Lambda functions have their own local namespace and cannot access variables other than those in their parameter list and those in the global namespace.
  Although it appears that lambda's are a one-line version of a function, they are not equivalent to inline statements in C or C++, whose purpose is
    by passing function stack allocation during invocation for performance reasons.

Syntax

The syntax of lambda functions contains only a single statement, which is as follows −

    lambda [arg1 [,arg2,.....argn]]:expression

The return Statement

    The statement return [expression] exits a function, optionally passing back an expression to the caller.
    A return statement with no arguments is the same as return None.

Scope of Variables

    All variables in a program may not be accessible at all locations in that program. This depends on where you have declared a variable.

        The scope of a variable determines the portion of the program where you can access a particular identifier.
        There are two basic scopes of variables in Python −

    1 Global variables
    2 Local variables

Global vs. Local variables

Variables that are defined inside a function body have a local scope, and those defined outside have a global scope.

This means that local variables can be accessed only inside the function in which they are declared, whereas global variables
can be accessed throughout the program body by all functions. When you call a function, the variables declared inside it are brought into scope.

                                        Python - Modules
                                        ================
A module allows you to logically organize your Python code. Grouping related code into a module makes the code easier to understand and use.
A module is a Python object with arbitrarily named attributes that you can bind and reference.

Simply, a module is a file consisting of Python code. A module can define functions, classes and variables. A module can also include runnable code.

    The import Statement

You can use any Python source file as a module by executing an import statement in some other Python source file. The import has the following syntax −

    import module1[, module2[,... moduleN]

When the interpreter encounters an import statement, it imports the module if the module is present in the search path. A search path is a list of directories that the interpreter searches before importing a module.
For example, to import the module support.py, you need to put the following command at the top of the script −

The from...import Statement

Python's from statement lets you import specific attributes from a module into the current namespace. The from...import has the following syntax −

        from modname import name1[, name2[, ... nameN]]

For example, to import the function fibonacci from the module fib, use the following statement −

    from fib import fibonacci

This statement does not import the entire module fib into the current namespace; it just introduces the item fibonacci from the module fib into the global symbol table of the importing module.
    The from...import * Statement

It is also possible to import all names from a module into the current namespace by using the following import statement −

    from modname import *

This provides an easy way to import all the items from a module into the current namespace; however, this statement should be used sparingly.

Locating Modules

    When you import a module, the Python interpreter searches for the module in the following sequences −

        The current directory.

        If the module isn't found, Python then searches each directory in the shell variable PYTHONPATH.

        If all else fails, Python checks the default path. On UNIX, this default path is normally /usr/local/lib/python/.

The module search path is stored in the system module sys as the sys.path variable. The sys.path variable contains the current directory, PYTHONPATH,
and the installation-dependent default.

The PYTHONPATH Variable

The PYTHONPATH is an environment variable, consisting of a list of directories. The syntax of PYTHONPATH is the same as that of the shell variable PATH.

Here is a typical PYTHONPATH from a Windows system −
        set PYTHONPATH = c:\python20\lib;

And here is a typical PYTHONPATH from a UNIX system −
        set PYTHONPATH = /usr/local/lib/python

Namespaces and Scoping

    Variables are names (identifiers) that map to objects. A namespace is a dictionary of variable names (keys) and their corresponding objects (values).

    A Python statement can access variables in a local namespace and in the global namespace. If a local and a global variable have the same name,
    the local variable shadows the global variable.

    Each function has its own local namespace. Class methods follow the same scoping rule as ordinary functions.

    Python makes educated guesses on whether variables are local or global. It assumes that any variable assigned a value in a function is local.

    Therefore, in order to assign a value to a global variable within a function, you must first use the global statement.

    The statement global VarName tells Python that VarName is a global variable. Python stops searching the local namespace for the variable.

    For example, we define a variable Money in the global namespace. Within the function Money, we assign Money a value, therefore Python assumes
    Money as a local variable. However, we accessed the value of the local variable Money before setting it, so an UnboundLocalError is the result.
    Uncommenting the global statement fixes the problem.

The globals() and locals() Functions
    The globals() and locals() functions can be used to return the names in the global and local namespaces depending on the
    location from where they are called.

    If locals() is called from within a function, it will return all the names that can be accessed locally from that function.

    If globals() is called from within a function, it will return all the names that can be accessed globally from that function.

    The return type of both these functions is dictionary. Therefore, names can be extracted using the keys() function.

The reload() Function
    When the module is imported into a script, the code in the top-level portion of a module is executed only once.

    Therefore, if you want to reexecute the top-level code in a module, you can use the reload() function. The reload() function imports a
    previously imported module again. The syntax of the reload() function is this −

    reload(module_name)

Here, module_name is the name of the module you want to reload and not the string containing the module name. For example, to reload hello module,
do the following −
    reload(hello)

Packages in Python
    A package is a hierarchical file directory structure that defines a single Python application environment that consists of modules and subpackages
    and sub-subpackages, and so on.

                                        Python - Files I/O
                                        ==================
This chapter covers all the basic I/O functions available in Python. For more functions, please refer to standard Python documentation.

Printing to the Screen
    The simplest way to produce output is using the print statement where you can pass zero or more expressions separated by commas.
    This function converts the expressions you pass into a string and writes the result to standard

Reading Keyboard Input
    Python provides two built-in functions to read a line of text from standard input, which by default comes from the keyboard. These functions are −

    raw_input
    input

The raw_input Function
    The raw_input([prompt]) function reads one line from standard input and returns it as a string (removing the trailing newline).

The input Function
    The input([prompt]) function is equivalent to raw_input, except that it assumes the input is a valid Python expression and returns the
    evaluated result to you.

Opening and Closing Files

Until now, you have been reading and writing to the standard input and output. Now, we will see how to use actual data files.

Python provides basic functions and methods necessary to manipulate files by default. You can do most of the file manipulation using a file object.
The open Function

Before you can read or write a file, you have to open it using Python's built-in open() function. This function creates a file object, which would be utilized to call other support methods associated with it.
Syntax

file object = open(file_name [, access_mode][, buffering])

Here are parameter details −

    file_name − The file_name argument is a string value that contains the name of the file that you want to access.

    access_mode − The access_mode determines the mode in which the file has to be opened, i.e., read, write, append, etc. A complete list of possible values is given below in the table. This is optional parameter and the default file access mode is read (r).

    buffering − If the buffering value is set to 0, no buffering takes place. If the buffering value is 1, line buffering is performed while accessing a file. If you specify the buffering value as an integer greater than 1, then buffering action is performed with the indicated buffer size. If negative, the buffer size is the system default(default behavior).

Here is a list of the different modes of opening a file −
    =========================================================================================================================================================
    | No. |	Modes |                                              Description                                                                                |
    |-----|-------|-----------------------------------------------------------------------------------------------------------------------------------------|
    | 1   |   r   |   Opens a file for reading only. The file pointer is placed at the beginning of the file. This is the default mode.                     |
    |-----|-------|-----------------------------------------------------------------------------------------------------------------------------------------|
    | 2   |   rb  |   Opens a file for reading only in binary format. The file pointer is placed at the beginning of the file. This is the default mode.    |
    |-----|-------|-----------------------------------------------------------------------------------------------------------------------------------------|
    | 3   |   r+  |   Opens a file for both reading and writing. The file pointer placed at the beginning of the file.                                      |
    |-----|-------|-----------------------------------------------------------------------------------------------------------------------------------------|
    | 4   |   rb+ |   Opens a file for both reading and writing in binary format. The file pointer placed at the beginning of the file.                     |
    |-----|-------|-----------------------------------------------------------------------------------------------------------------------------------------|
    | 5   |   w   |   Opens a file for writing only. Overwrites the file if the file exists. If the file does not exist, creates a new file for writing.    |
    |-----|-------|-----------------------------------------------------------------------------------------------------------------------------------------|
    | 6   |   wb  |   Opens a file for writing only in binary format. Overwrites the file if the file exists. If the file does not exist, creates a new     |
    |     |       |    file for writing.                                                                                                                    |
    |-----|-------|-----------------------------------------------------------------------------------------------------------------------------------------|
    | 7   |   w+  |   Opens a file for both writing and reading. Overwrites the existing file if the file exists. If the file does not exist, creates a     |
    |     |       |    new file for reading and writing.                                                                                                    |
    |-----|-------|-----------------------------------------------------------------------------------------------------------------------------------------|
    | 8   |   wb+ |   Opens a file for both writing and reading in binary format. Overwrites the existing file if the file exists. If the file does not     |
    |     |       |    exist, creates a new file for reading and writing.                                                                                   |
    |-----|-------|-----------------------------------------------------------------------------------------------------------------------------------------|
    | 9   |   a   |   Opens a file for appending. The file pointer is at the end of the file if the file exists. That is, the file is in the append mode.   |
    |     |       |    If the file does not exist, it creates a new file for writing.                                                                       |
    |-----|-------|-----------------------------------------------------------------------------------------------------------------------------------------|
    | 10  |   ab  |   Opens a file for appending in binary format. The file pointer is at the end of the file if the file exists. That is, the file is in   |
    |     |       |    the append mode. If the file does not exist, it creates a new file for writing.                                                      |
    |-----|-------|-----------------------------------------------------------------------------------------------------------------------------------------|
    | 11  |   a+  |   Opens a file for both appending and reading. The file pointer is at the end of the file if the file exists. The file opens in the     |
    |     |       |    append mode. If the file does not exist, it creates a new file for reading and writing.                                              |
    |-----|-------|-----------------------------------------------------------------------------------------------------------------------------------------|
    | 12  |   ab+ |   Opens a file for both appending and reading in binary format. The file pointer is at the end of the file if the file exists.          |
    |     |       |   The file opens in the append mode. If the file does not exist, it creates a new file for reading and writing.                         |
    |-----|-------|-----------------------------------------------------------------------------------------------------------------------------------------|

The file Object Attributes

Once a file is opened and you have one file object, you can get various information related to that file.

Here is a list of all attributes related to file object −
   =====================================================================================================|
   |      |    Attribute      |   Description                                                           |
   |------|-------------------|-------------------------------------------------------------------------|
   |  1   |   file.closed     |   Returns true if file is closed, false otherwise.                      |
   |------|-------------------|-------------------------------------------------------------------------|
   |  2   |   file.mode       |   Returns access mode with which file was opened.                       |
   |------|-------------------|-------------------------------------------------------------------------|
   |  3   |   file.name       |   Returns name of the file.                                             |
   |------|-------------------|-------------------------------------------------------------------------|
   |  4   |   file.softspace  |   Returns false if space explicitly required with print, true otherwise.|
   |------|-------------------|-------------------------------------------------------------------------|

The close() Method
    The close() method of a file object flushes any unwritten information and closes the file object, after which no more writing can be done.
    Python automatically closes a file when the reference object of a file is reassigned to another file. It is a good practice to use the close() method to close a file.
    Syntax

                fileObject.close();

Reading and Writing Files
    The file object provides a set of access methods to make our lives easier. We would see how to use read() and write() methods to read and write files.
    The write() Method

        The write() method writes any string to an open file. It is important to note that Python strings can have binary data and not just text.

    The write() method does not add a newline character ('\n') to the end of the string −
            Syntax

            fileObject.write(string);

    The read() Method

    The read() method reads a string from an open file. It is important to note that Python strings can have binary data. apart from text data.
            Syntax

            fileObject.read([count]);

    File Positions

    The tell() method tells you the current position within the file; in other words, the next read or write will occur at that many bytes from the beginning
        of the file.

    The seek(offset[, from]) method changes the current file position. The offset argument indicates the number of bytes to be moved. The from argument
    specifies the reference position from where the bytes are to be moved.

    If from is set to 0, it means use the beginning of the file as the reference position and 1 means use the current position as the reference position
    and if it is set to 2 then the end of the file would be taken as the reference position.

Renaming and Deleting Files
    Python os module provides methods that help you perform file-processing operations, such as renaming and deleting files.
    To use this module you need to import it first and then you can call any related functions.

    The rename() Method
    The rename() method takes two arguments, the current filename and the new filename.
            Syntax

            os.rename(current_file_name, new_file_name)


    The remove() Method
    You can use the remove() method to delete files by supplying the name of the file to be deleted as the argument.
    Syntax

        os.remove(file_name)

    The remove() Method
    You can use the remove() method to delete files by supplying the name of the file to be deleted as the argument.
    Syntax

    os.remove(file_name)

Directories in Python
    All files are contained within various directories, and Python has no problem handling these too. The os module has several methods that help you create, remove,
    and change directories.
    The mkdir() Method
        You can use the mkdir() method of the os module to create directories in the current directory. You need to supply an argument to this method which contains the name of
        the directory to be created.
            Syntax

            os.mkdir("newdir")

    The chdir() Method
    You can use the chdir() method to change the current directory. The chdir() method takes an argument, which is the name of the directory that you want to make the current
     directory.
    Syntax

    os.chdir("newdir")

    The getcwd() Method

    The getcwd() method displays the current working directory.
    Syntax

    os.getcwd()

    The rmdir() Method

    The rmdir() method deletes the directory, which is passed as an argument in the method.

    Before removing a directory, all the contents in it should be removed.
    Syntax

    os.rmdir('dirname')

    File & Directory Related Methods

    There are three important sources, which provide a wide range of utility methods to handle and manipulate files & directories on Windows and Unix operating systems. They are as follows −

        File Object Methods: The file object provides functions to manipulate files.

        OS Object Methods: This provides methods to process files as well as directories.


                                                        Python Exception Handling
                                                        =========================
Python provides two very important features to handle any unexpected error in your Python programs and to add debugging capabilities in them −

    Exception Handling − This would be covered in this tutorial. Here is a list standard Exceptions available in Python: Standard Exceptions.

    Assertions − This would be covered in Assertions in Python tutorial.

List of Standard Exceptions −
==============================================================================================================================================================================
|  No. 	|   Exception Name      |                                           Description                                                                                      |
|-------|-----------------------|--------------------------------------------------------------------------------------------------------------------------------------------|
|   1   |   Exception           |   Base class for all exceptions                                                                                                            |
|-------|-----------------------|--------------------------------------------------------------------------------------------------------------------------------------------|
|   2   |   StopIteration       |   Raised when the next() method of an iterator does not point to any object.                                                               |
|-------|-----------------------|--------------------------------------------------------------------------------------------------------------------------------------------|
|   3   |   SystemExit          |   Raised by the sys.exit() function.                                                                                                       |
|-------|-----------------------|--------------------------------------------------------------------------------------------------------------------------------------------|
|   4   |   StandardError       |   Base class for all built-in exceptions except StopIteration and SystemExit.                                                              |
|-------|-----------------------|--------------------------------------------------------------------------------------------------------------------------------------------|
|   5   |   ArithmeticError     |   Base class for all errors that occur for numeric calculation.                                                                            |
|-------|-----------------------|--------------------------------------------------------------------------------------------------------------------------------------------|
|   6   |   OverflowError       |   Raised when a calculation exceeds maximum limit for a numeric type.                                                                      |
|-------|-----------------------|--------------------------------------------------------------------------------------------------------------------------------------------|
|   7   |   FloatingPointError  |   Raised when a floating point calculation fails.                                                                                          |
|-------|-----------------------|--------------------------------------------------------------------------------------------------------------------------------------------|
|   8   |   ZeroDivisionError   |   Raised when division or modulo by zero takes place for all numeric types.                                                                |
|-------|-----------------------|--------------------------------------------------------------------------------------------------------------------------------------------|
|   9   |   AssertionError      |   Raised in case of failure of the Assert statement.                                                                                       |
|-------|-----------------------|--------------------------------------------------------------------------------------------------------------------------------------------|
|   10  |   AttributeError      |   Raised in case of failure of attribute reference or assignment.                                                                          |
|-------|-----------------------|--------------------------------------------------------------------------------------------------------------------------------------------|
|   11  |   EOFError            |   Raised when there is no input from either the raw_input() or input() function and the end of file is reached.                            |
|-------|-----------------------|--------------------------------------------------------------------------------------------------------------------------------------------|
|   12  |   ImportError         |   Raised when an import statement fails.                                                                                                   |
|-------|-----------------------|--------------------------------------------------------------------------------------------------------------------------------------------|
|   13  |   KeyboardInterrupt   |   Raised when the user interrupts program execution, usually by pressing Ctrl+c.                                                           |
|-------|-----------------------|--------------------------------------------------------------------------------------------------------------------------------------------|
|   14  |   LookupError         |   Base class for all lookup errors.                                                                                                        |
|-------|-----------------------|--------------------------------------------------------------------------------------------------------------------------------------------|
|   15  |   IndexError          |   Raised when an index is not found in a sequence.                                                                                         |
|-------|-----------------------|--------------------------------------------------------------------------------------------------------------------------------------------|
|   16  |   KeyError            |   Raised when the specified key is not found in the dictionary.                                                                            |
|-------|-----------------------|--------------------------------------------------------------------------------------------------------------------------------------------|
|   17  |   NameError           |   Raised when an identifier is not found in the local or global namespace.                                                                 |
|-------|-----------------------|--------------------------------------------------------------------------------------------------------------------------------------------|
|   18  |   UnboundLocalError   |   Raised when trying to access a local variable in a function or method but no value has been assigned to it.                              |
|-------|-----------------------|--------------------------------------------------------------------------------------------------------------------------------------------|
|   19  |   EnvironmentError    |   Base class for all exceptions that occur outside the Python environment.                                                                 |
|-------|-----------------------|--------------------------------------------------------------------------------------------------------------------------------------------|
|   20  |   IOError             |   Raised when an input/ output operation fails, such as the print statement or the open() function when trying to open a file that does    |
|       |                       |       not exist.                                                                                                                           |
|-------|-----------------------|--------------------------------------------------------------------------------------------------------------------------------------------|
|   21  |   IOError             |   Raised for operating system-related errors.                                                                                              |
|-------|-----------------------|--------------------------------------------------------------------------------------------------------------------------------------------|
|   22  |   SyntaxError         |   Raised when there is an error in Python syntax.                                                                                          |
|-------|-----------------------|--------------------------------------------------------------------------------------------------------------------------------------------|
|   23  |   IndentationError    |   Raised when indentation is not specified properly.                                                                                       |
|-------|-----------------------|--------------------------------------------------------------------------------------------------------------------------------------------|
|   24  |   SystemError         |   Raised when the interpreter finds an internal problem, but when this error is encountered the Python interpreter does not exit.          |
|-------|-----------------------|--------------------------------------------------------------------------------------------------------------------------------------------|
|   25  |   SystemExit          |   Raised when Python interpreter is quit by using the sys.exit() function. If not handled in the code, causes the interpreter to exit.     |
|-------|-----------------------|--------------------------------------------------------------------------------------------------------------------------------------------|
|   26  |   TypeError           |   Raised when an operation or function is attempted that is invalid for the specified data type.                                           |
|-------|-----------------------|--------------------------------------------------------------------------------------------------------------------------------------------|
|   27  |   ValueError          |   Raised when the built-in function for a data type has the valid type of arguments, but the arguments have invalid values specified.      |
|-------|-----------------------|--------------------------------------------------------------------------------------------------------------------------------------------|
|   28  |   RuntimeError        |   Raised when a generated error does not fall into any category.                                                                           |
|-------|-----------------------|--------------------------------------------------------------------------------------------------------------------------------------------|
|   29  |   NotImplementedError |   Raised when an abstract method that needs to be implemented in an inherited class is not actually implemented.                           |
|-------|-----------------------|--------------------------------------------------------------------------------------------------------------------------------------------|

Assertions in Python

    An assertion is a sanity-check that you can turn on or turn off when you are done with your testing of the program.

    The easiest way to think of an assertion is to liken it to a raise-if statement (or to be more accurate, a raise-if-not statement). An expression is tested,
    and if the result comes up false, an exception is raised.

    Assertions are carried out by the assert statement, the newest keyword to Python, introduced in version 1.5.

    Programmers often place assertions at the start of a function to check for valid input, and after a function call to check for valid output.
        The assert Statement

        When it encounters an assert statement, Python evaluates the accompanying expression, which is hopefully true. If the expression is false, Python raises an
        AssertionError exception.

        The syntax for assert is −

        assert Expression[, Arguments]

    If the assertion fails, Python uses ArgumentExpression as the argument for the AssertionError. AssertionError exceptions can be caught and handled like any other exception
     using the try-except statement, but if not handled, they will terminate the program and produce a traceback.

What is Exception?
    An exception is an event, which occurs during the execution of a program that disrupts the normal flow of the program's instructions. In general, when a Python script
    encounters a situation that it cannot cope with, it raises an exception. An exception is a Python object that represents an error.
    When a Python script raises an exception, it must either handle the exception immediately otherwise it terminates and quits.

Handling an exception
    If you have some suspicious code that may raise an exception, you can defend your program by placing the suspicious code in a try: block. After the try: block,
    include an except: statement, followed by a block of code which handles the problem as elegantly as possible.
            Syntax

            Here is simple syntax of try....except...else blocks −

                                try:
                                   You do your operations here;
                                   ......................
                                except ExceptionI:
                                   If there is ExceptionI, then execute this block.
                                except ExceptionII:
                                   If there is ExceptionII, then execute this block.
                                   ......................
                                else:
                                   If there is no exception then execute this block.

Here are few important points about the above-mentioned syntax −
    A single try statement can have multiple except statements. This is useful when the try block contains statements that may throw different types of exceptions.
    You can also provide a generic except clause, which handles any exception.
    After the except clause(s), you can include an else-clause. The code in the else-block executes if the code in the try: block does not raise an exception.
    The else-block is a good place for code that does not need the try: block's protection.

The except Clause with No Exceptions
        You can also use the except statement with no exceptions defined as follows −

                        try:
                           You do your operations here;
                           ......................
                        except:
                           If there is any exception, then execute this block.
                           ......................
                        else:
                           If there is no exception then execute this block.

This kind of a try-except statement catches all the exceptions that occur. Using this kind of try-except statement is not considered a good programming practice though,
because it catches all exceptions but does not make the programmer identify the root cause of the problem that may occur.

The except Clause with Multiple Exceptions
    You can also use the same except statement to handle multiple exceptions as follows −

                        try:
                           You do your operations here;
                           ......................
                        except(Exception1[, Exception2[,...ExceptionN]]]):
                           If there is any exception from the given exception list,
                           then execute this block.
                           ......................
                        else:
                           If there is no exception then execute this block.

The try-finally Clause
    You can use a finally: block along with a try: block. The finally block is a place to put any code that must execute, whether the try-block raised an exception or not.
    The syntax of the try-finally statement is this −

                        try:
                           You do your operations here;
                           ......................
                           Due to any exception, this may be skipped.
                        finally:
                           This would always be executed.
                           ......................

Argument of an Exception
    An exception can have an argument, which is a value that gives additional information about the problem. The contents of the argument vary by exception.
    You capture an exception's argument by supplying a variable in the except clause as follows −

                        try:
                           You do your operations here;
                           ......................
                        except ExceptionType, Argument:
                           You can print value of Argument here...

    If you write the code to handle a single exception, you can have a variable follow the name of the exception in the except statement.
    If you are trapping multiple exceptions, you can have a variable follow the tuple of the exception.

    This variable receives the value of the exception mostly containing the cause of the exception. The variable can receive a single value or multiple values in the form
    of a tuple. This tuple usually contains the error string, the error number, and an error location.

Raising an Exceptions
    You can raise exceptions in several ways by using the raise statement. The general syntax for the raise statement is as follows.
                    Syntax

                    raise [Exception [, args [, traceback]]]

    Here, Exception is the type of exception (for example, NameError) and argument is a value for the exception argument. The argument is optional; if not supplied,
    the exception argument is None.

    The final argument, traceback, is also optional (and rarely used in practice), and if present, is the traceback object used for the exception.

User-Defined Exceptions
    Python also allows you to create your own exceptions by deriving classes from the standard built-in exceptions.
    Here is an example related to RuntimeError. Here, a class is created that is subclassed from RuntimeError. This is useful when you need to display more
    specific information when an exception is caught.
    In the try block, the user-defined exception is raised and caught in the except block. The variable e is used to create an instance of the class Networkerror.

                    class Networkerror(RuntimeError):
                       def __init__(self, arg):
                          self.args = arg


                                              Object Oriented
                                              ===============
Python has been an object-oriented language since it existed. Because of this, creating and using classes and objects are downright easy.
 This chapter helps you become an expert in using Python's object-oriented programming support.

If you do not have any previous experience with object-oriented (OO) programming, you may want to consult an introductory course on it or at least a
tutorial of some sort so that you have a grasp of the basic concepts.

However, here is small introduction of Object-Oriented Programming (OOP) to bring you at speed −

Overview of OOP Terminology

    Class − A user-defined prototype for an object that defines a set of attributes that characterize any object of the class. The attributes are data members
            (class variables and instance variables) and methods, accessed via dot notation.

    Class variable − A variable that is shared by all instances of a class. Class variables are defined within a class but outside any of the class's methods.
             Class variables are not used as frequently as instance variables are.

    Data member − A class variable or instance variable that holds data associated with a class and its objects.

    Function overloading − The assignment of more than one behavior to a particular function. The operation performed varies by the types of objects or arguments involved.

    Instance variable − A variable that is defined inside a method and belongs only to the current instance of a class.

    Inheritance − The transfer of the characteristics of a class to other classes that are derived from it.

    Instance − An individual object of a certain class. An object obj that belongs to a class Circle, for example, is an instance of the class Circle.

    Instantiation − The creation of an instance of a class.

    Method − A special kind of function that is defined in a class definition.

    Object − A unique instance of a data structure that's defined by its class. An object comprises both data members (class variables and instance variables) and methods.

    Operator overloading − The assignment of more than one function to a particular operator.

Creating Classes

The class statement creates a new class definition. The name of the class immediately follows the keyword class followed by a colon as follows −
                                =====================================================
                                |    class ClassName:                               |
                                |          'Optional class documentation string'    |
                                |          class_suite                              |
                                =====================================================

    The class has a documentation string, which can be accessed via ClassName.__doc__.

    The class_suite consists of all the component statements defining class members, data attributes and functions.

    Happy to say you done Congratulation !!!!!!!!!!!!!!!!!!!!
